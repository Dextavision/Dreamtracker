input CreateDreamInput {
  dreamID: Int!
  name: String!
  description: String!
  private: Int
  userID: String!
  upvotes: Int
  created: String
}

type Dream {
  dreamID: Int!
  name: String!
  description: String!
  private: Int
  userID: String!
  upvotes: Int
  created: String
}

input UpdateDreamInput {
  dreamID: Int!
  name: String
  description: String
  private: Int
  userID: String
  upvotes: Int
  created: String
}

input CreateFriendshipInput {
  userA: String!
  userB: String!
  created: String
  status: String
}

type Friendship {
  userA: String!
  userB: String!
  created: String
  status: String
}

input UpdateFriendshipInput {
  userA: String!
  userB: String!
  created: String
  status: String
}

input CreateGoalInput {
  goalID: Int!
  name: String!
  description: String!
  dreamID: Int!
  finished: Int
  created: String
}

type Goal {
  goalID: Int!
  name: String!
  description: String!
  dreamID: Int!
  finished: Int
  created: String
}

input UpdateGoalInput {
  goalID: Int!
  name: String
  description: String
  dreamID: Int
  finished: Int
  created: String
}

input CreateUpvoteInput {
  userID: String!
  dreamID: Int!
}

type Upvote {
  userID: String!
  dreamID: Int!
}

input UpdateUpvoteInput {
  userID: String!
  dreamID: Int!
}

input CreateUserInput {
  userID: String!
  name: String!
  description: String!
  jobTitle: String
  profilePictureURL: String
  created: String
}

type User {
  userID: String!
  name: String!
  description: String!
  jobTitle: String
  profilePictureURL: String
  created: String
}

input UpdateUserInput {
  userID: String!
  name: String
  description: String
  jobTitle: String
  profilePictureURL: String
  created: String
}

input CreateUserSettingInput {
  settingID: Int!
  settingName: String!
  settingValue: String!
  userID: String!
}

type UserSetting {
  settingID: Int!
  settingName: String!
  settingValue: String!
  userID: String!
}

input UpdateUserSettingInput {
  settingID: Int!
  settingName: String
  settingValue: String
  userID: String
}

type Mutation {
  deleteDream(dreamID: Int!): Dream
  createDream(createDreamInput: CreateDreamInput!): Dream
  updateDream(updateDreamInput: UpdateDreamInput!): Dream
  deleteFriendship(userB: String!): Friendship
  createFriendship(createFriendshipInput: CreateFriendshipInput!): Friendship
  updateFriendship(updateFriendshipInput: UpdateFriendshipInput!): Friendship
  deleteGoals(dreamID: Int!): Goal
  deleteGoal(goalID: Int!): Goal
  createGoal(createGoalInput: CreateGoalInput!): Goal
  updateGoal(updateGoalInput: UpdateGoalInput!): Goal
  deleteUpvote(dreamID: Int!): Upvote
  createUpvote(createUpvoteInput: CreateUpvoteInput!): Upvote
  updateUpvote(updateUpvoteInput: UpdateUpvoteInput!): Upvote
  deleteUser(userID: String!): User
  createUser(createUserInput: CreateUserInput!): User
  updateUser(updateUserInput: UpdateUserInput!): User
  deleteUserSetting(settingID: Int!): UserSetting
  createUserSetting(
    createUserSettingInput: CreateUserSettingInput!
  ): UserSetting
  updateUserSetting(
    updateUserSettingInput: UpdateUserSettingInput!
  ): UserSetting
}

type Query {
  getDream(dreamID: Int!): Dream
  listDreams(userID: String!): [Dream]
  getFriendship(userB: String!): Friendship
  listFriendships: [Friendship]
  getGoal(goalID: Int!): Goal
  listGoals(dreamID: Int!): [Goal]
  getUpvote(dreamID: Int!): Upvote
  listUpvotes: [Upvote]
  getUser(userID: String!): User
  listUsers: [User]
  getUserSetting(settingID: Int!): UserSetting
  listUserSettings: [UserSetting]
}

type Subscription {
  onCreateDream: Dream @aws_subscribe(mutations: ["createDream"])
  onCreateFriendship: Friendship @aws_subscribe(mutations: ["createFriendship"])
  onCreateGoal: Goal @aws_subscribe(mutations: ["createGoal"])
  onCreateUpvote: Upvote @aws_subscribe(mutations: ["createUpvote"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onCreateUserSetting: UserSetting
    @aws_subscribe(mutations: ["createUserSetting"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
